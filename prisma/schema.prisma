generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  username              String         @unique
  firstName             String
  lastName              String
  profilePicture        String?
  googleId              String?        @unique
  facebookId            String?        @unique
  email                 String         @unique
  password              String?
  role                  UserRole       @default(USER)
  createdAt             DateTime       @default(now())
  characters            Character[]
  errorReports          Error[]
  ownerCampaigns        Campaign[]     @relation("owner")
  pendingCampaigns      Campaign[]     @relation("pending")
  playerCampaigns       Campaign[]     @relation("player")
  receivedNotifications Notification[] @relation("received")
  sentNotifications     Notification[] @relation("sent")
}

model Campaign {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  owner          User          @relation("owner", fields: [ownerId], references: [id])
  ownerId        Int
  pendingPlayers User[]        @relation("pending")
  players        User[]        @relation("player")
  factions       Faction[]
  name           String
  location       String
  picture        Json?
  gangs          Gang[]
  sessions       Session[]
  characters     Character[]
  affiliations   Affiliation[]
}

model Faction {
  id           Int           @id @default(autoincrement())
  factionType  FactionType
  name         String
  picture      Json?
  background   Json?
  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId   Int
  affiliations Affiliation[]
}

model Affiliation {
  id         Int         @id @default(autoincrement())
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int
  value      Int         @default(0)
  factions   Faction[]
  gangs      Gang[]
  characters Character[]
}

enum FactionType {
  churchOfElShaddai
  corporateHoldouts
  federalReservists
  noblebloods
}

model Session {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  sessionNumber Int
  name          String
  location      String?
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId    Int
  briefing      Json
  picture       Json?
  notes         Note[]
  characters    Character[]
  scenes        Scene[]

  @@unique([sessionNumber, campaignId])
  @@unique([name, campaignId])
}

model Scene {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  sceneNumber Int         @unique
  name        String
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int
  briefing    Json?
  characters  Character[]
}

model Notification {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  type        NotificationType
  recipient   User             @relation("received", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int
  sender      User             @relation("sent", fields: [senderId], references: [id])
  senderId    Int
  read        Boolean          @default(false)
  readAt      DateTime?
}

enum NotificationType {
  campaignInvite
  sessionInvite
}

model Note {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int
  content     Json
  session     Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int

  @@unique([sessionId, characterId])
}

model Gang {
  id           Int           @id @default(autoincrement())
  name         String
  level        Int           @default(1)
  characters   Character[]
  profits      Int           @default(10)
  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId   Int
  affiliations Affiliation[]
}

model Character {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  level              Int                  @default(1)
  profits            Int                  @default(10)
  stats              Json                 @default("{}")
  picture            Json?
  height             Int
  weight             Int
  age                Int
  sex                String
  backstory          Json?
  firstTaste         Json?
  badMedicine        Json?
  attributes         Json
  firstName          String
  lastName           String?
  playerCharacter    Boolean              @default(false)
  preferences        Json?
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  active             Boolean              @default(false)
  perks              Perk[]               @relation("CharacterToPerk")
  campaign           Campaign?            @relation(fields: [campaignId], references: [id])
  campaignId         Int?
  sessions           Session[]
  scenes             Scene[]
  gang               Gang?                @relation(fields: [gangId], references: [id])
  gangId             Int?
  conditions         ConditionReference[]
  characterCart      CharacterCart?
  characterInventory CharacterInventory?
  Note               Note[]
  affiliations       Affiliation[]

  @@index([userId])
}

model CharacterCart {
  id          Int                @id @default(autoincrement())
  character   Character?         @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int?               @unique
  items       CartItemRelation[]
}

model CartItemRelation {
  id              Int            @id @default(autoincrement())
  item            Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId          Int
  quantity        Int            @default(1)
  characterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, itemId])
}

model CharacterInventory {
  id          Int        @id @default(autoincrement())
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int?       @unique
  actions     Action[]
  items       Item[]
}

model ConditionReference {
  id          Int        @id @default(autoincrement())
  stacks      Int?
  condition   Condition  @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId Int
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int?
  item        Item?      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      Int?

  @@unique([conditionId, characterId])
}

model KeywordReference {
  id        Int     @id @default(autoincrement())
  value     Int?
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId Int
  item      Item?   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int?

  @@unique([keywordId, itemId])
}

model Condition {
  id                 Int                  @id @default(autoincrement())
  name               String
  conditionType      ConditionType
  description        String
  keywords           Keyword[]
  ConditionReference ConditionReference[]
}

model Keyword {
  id               Int                @id @default(autoincrement())
  keywordType      KeywordType
  name             String
  description      String
  KeywordReference KeywordReference[]
  Condition        Condition?         @relation(fields: [conditionId], references: [id])
  conditionId      Int?

  @@unique([name, keywordType])
}

model Action {
  id                   Int                 @id @default(autoincrement())
  name                 String
  description          String
  costs                Json?
  roll                 Json?
  actionType           ActionType
  actionSubtypes       String[]
  duration             Json?
  equipped             Boolean             @default(false)
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseActionId         Int?
  modifiers            Modifier[]
  itemLink             ItemLinkReference?  @relation(fields: [itemLinkId], references: [id], onDelete: Cascade)
  itemLinkId           Int?
}

model Item {
  id                   Int                  @id @default(autoincrement())
  name                 String
  itemType             ItemType
  itemSubtype          String?
  rarity               ItemRarity           @default(common)
  grade                Int                  @default(1)
  picture              Json?
  description          String?
  stats                Json?
  price                Int?
  equipped             Boolean?             @default(false)
  characterInventory   CharacterInventory?  @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseItemId           Int?
  conditions           ConditionReference[]
  keywords             KeywordReference[]
  itemLinkReference    ItemLinkReference?   @relation("PrimaryLink")
  itemLink             ItemLinkReference?   @relation(fields: [itemLinkId], references: [id], onDelete: Cascade)
  itemLinkId           Int?
  cartRelation         CartItemRelation[]

  @@index([itemType])
  @@index([characterInventoryId])
  @@index([itemType, characterInventoryId])
}

model ItemLinkReference {
  id      Int      @id @default(autoincrement())
  item    Item     @relation("PrimaryLink", fields: [itemId], references: [id], onDelete: Cascade)
  itemId  Int      @unique
  items   Item[]
  actions Action[]
}

enum ItemType {
  weapon
  armor
  cybernetic
  mutation
  vehicle
  drone
  modification
  reusable
  consumable
}

model Modifier {
  id        Int          @id @default(autoincrement())
  type      ModifierType
  stat      String?
  operator  String
  valueType ValueType?
  attribute String?
  skill     String?
  value     Int?
  duration  Json?
  action    Action?      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId  Int?
  perk      Perk?        @relation(fields: [perkId], references: [id], onDelete: Cascade)
  perkId    Int?
}

enum ValueType {
  number
  attribute
  skill
}

enum ModifierType {
  roll
  stat
}

enum ItemCategory {
  reusable
  consumable
}

enum DurationUnit {
  second
  minute
  hour
  day
  week
  month
  year
  turn
  round
  scene
  session
}

model Perk {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  requirements Json?
  characters   Character[] @relation("CharacterToPerk")
  modifiers    Modifier[]
}

model BookSection {
  id      Int         @id @default(autoincrement())
  order   Int         @unique
  title   String      @unique
  entries BookEntry[]
}

model BookEntry {
  id        Int         @id @default(autoincrement())
  page      Int         @unique
  title     String
  section   BookSection @relation(fields: [sectionId], references: [id])
  sectionId Int
  content   Json

  @@unique([title, sectionId])
}

model PatchNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   Float    @unique
  title     String
  content   Json
}

model Error {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum KeywordType {
  weapon
  armor
  vehicle
  chromebits
  hardwired
  networked
}

enum CyberneticType {
  roll
  stat
  offensive
  defensive
  function
}

enum ActionType {
  action
  extendedAction
  reaction
  passive
}

enum ItemRarity {
  common
  uncommon
  rare
  blackMarket
  artifact
}

enum ConditionType {
  character
  item
}
