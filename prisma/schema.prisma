generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  username              String         @unique
  firstName             String
  lastName              String
  profilePicture        String?
  googleId              String?        @unique
  facebookId            String?        @unique
  email                 String         @unique
  password              String?
  role                  UserRole       @default(USER)
  createdAt             DateTime       @default(now())
  characters            Character[]
  errorReports          Error[]
  ownerCampaigns        Campaign[]     @relation("owner")
  pendingCampaigns      Campaign[]     @relation("pending")
  playerCampaigns       Campaign[]     @relation("player")
  receivedNotifications Notification[] @relation("received")
  sentNotifications     Notification[] @relation("sent")
}

model Campaign {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  owner          User          @relation("owner", fields: [ownerId], references: [id])
  ownerId        Int
  pendingPlayers User[]        @relation("pending")
  players        User[]        @relation("player")
  factions       Faction[]
  name           String
  location       String
  picture        Json?
  gangs          Gang[]
  sessions       Session[]
  characters     Character[]
  affiliations   Affiliation[]
}

model Faction {
  id           Int           @id @default(autoincrement())
  factionType  FactionType
  name         String
  picture      Json?
  background   Json?
  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId   Int
  affiliations Affiliation[]
}

model Affiliation {
  id         Int         @id @default(autoincrement())
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int
  value      Int         @default(0)
  factions   Faction[]
  gangs      Gang[]
  characters Character[]
}

enum FactionType {
  churchOfElShaddai
  corporateHoldouts
  federalReservists
  noblebloods
}

model Session {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  sessionNumber Int
  name          String
  location      String?
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId    Int
  briefing      Json
  picture       Json?
  notes         Note[]
  characters    Character[]
  scenes        Scene[]

  @@unique([sessionNumber, campaignId])
  @@unique([name, campaignId])
}

model Scene {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  sceneNumber Int         @unique
  name        String
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int
  briefing    Json?
  characters  Character[]
}

model Notification {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  type        NotificationType
  recipient   User             @relation("received", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int
  sender      User             @relation("sent", fields: [senderId], references: [id])
  senderId    Int
  read        Boolean          @default(false)
  readAt      DateTime?
}

enum NotificationType {
  campaignInvite
  sessionInvite
}

model Note {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int
  content     Json
  session     Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int

  @@unique([sessionId, characterId])
}

model Gang {
  id           Int           @id @default(autoincrement())
  name         String
  level        Int           @default(1)
  characters   Character[]
  profits      Int           @default(10)
  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId   Int
  affiliations Affiliation[]
}

model Character {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  level              Int                  @default(1)
  profits            Int                  @default(10)
  stats              Json                 @default("{}")
  picture            Json?
  height             Int
  weight             Int
  age                Int
  sex                String
  backstory          Json?
  firstTaste         Json?
  badMedicine        Json?
  attributes         Json
  firstName          String
  lastName           String?
  playerCharacter    Boolean              @default(false)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  active             Boolean              @default(false)
  perks              Perk[]               @relation("CharacterToPerk")
  campaign           Campaign?            @relation(fields: [campaignId], references: [id])
  campaignId         Int?
  sessions           Session[]
  scenes             Scene[]
  gang               Gang?                @relation(fields: [gangId], references: [id])
  gangId             Int?
  conditions         ConditionReference[]
  characterCart      CharacterCart?
  characterInventory CharacterInventory?
  Note               Note[]
  affiliations       Affiliation[]
}

model CharacterCart {
  id            Int                        @id @default(autoincrement())
  character     Character?                 @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   Int?                       @unique
  weapons       CartWeaponRelation[]
  armor         CartArmorRelation[]
  cybernetics   CartCyberneticRelation[]
  vehicles      CartVehicleRelation[]
  drones        CartDroneRelation[]
  modifications CartModificationRelation[]
  items         CartItemRelation[]
}

model CartWeaponRelation {
  id              Int            @id @default(autoincrement())
  weapon          Weapon         @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId        Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, weaponId])
}

model CartArmorRelation {
  id              Int            @id @default(autoincrement())
  armor           Armor          @relation(fields: [armorId], references: [id], onDelete: Cascade)
  armorId         Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, armorId])
}

model CartCyberneticRelation {
  id              Int            @id @default(autoincrement())
  cybernetic      Cybernetic     @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId    Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, cyberneticId])
}

model CartVehicleRelation {
  id              Int            @id @default(autoincrement())
  vehicle         Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId       Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, vehicleId])
}

model CartDroneRelation {
  id              Int            @id @default(autoincrement())
  drone           Drone          @relation(fields: [droneId], references: [id], onDelete: Cascade)
  droneId         Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, droneId])
}

model CartModificationRelation {
  id              Int            @id @default(autoincrement())
  modification    Modification   @relation(fields: [modificationId], references: [id], onDelete: Cascade)
  modificationId  Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, modificationId])
}

model CartItemRelation {
  id              Int            @id @default(autoincrement())
  item            Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId          Int
  quantity        Int            @default(1)
  CharacterCart   CharacterCart? @relation(fields: [characterCartId], references: [id])
  characterCartId Int?

  @@unique([characterCartId, itemId])
}

model CharacterInventory {
  id            Int            @id @default(autoincrement())
  character     Character?     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   Int?           @unique
  weapons       Weapon[]
  armor         Armor[]
  cybernetics   Cybernetic[]
  vehicles      Vehicle[]
  drones        Drone[]
  actions       Action[]
  modifications Modification[]
  items         Item[]
}

model ConditionReference {
  id           Int         @id @default(autoincrement())
  stacks       Int?
  condition    Condition   @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId  Int
  character    Character?  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId  Int?
  weapon       Weapon?     @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId     Int?
  armor        Armor?      @relation(fields: [armorId], references: [id], onDelete: Cascade)
  armorId      Int?
  cybernetic   Cybernetic? @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId Int?
  vehicle      Vehicle?    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId    Int?
  drone        Drone?      @relation(fields: [droneId], references: [id], onDelete: Cascade)
  droneId      Int?
  item         Item?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       Int?

  @@unique([conditionId, characterId])
}

model KeywordReference {
  id             Int           @id @default(autoincrement())
  value          Int?
  keyword        Keyword       @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId      Int
  weapon         Weapon?       @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId       Int?
  armor          Armor?        @relation(fields: [armorId], references: [id], onDelete: Cascade)
  armorId        Int?
  cybernetic     Cybernetic?   @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId   Int?
  vehicle        Vehicle?      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId      Int?
  drone          Drone?        @relation(fields: [droneId], references: [id], onDelete: Cascade)
  droneId        Int?
  item           Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId         Int?
  modification   Modification? @relation(fields: [modificationId], references: [id], onDelete: Cascade)
  modificationId Int?

  @@unique([keywordId, weaponId])
  @@unique([keywordId, armorId])
  @@unique([keywordId, cyberneticId])
  @@unique([keywordId, vehicleId])
  @@unique([keywordId, itemId])
  @@unique([keywordId, modificationId])
  @@unique([keywordId, droneId])
}

model Condition {
  id                 Int                  @id @default(autoincrement())
  name               String
  conditionType      ConditionType
  description        String
  keywords           Keyword[]
  ConditionReference ConditionReference[]
}

model Keyword {
  id               Int                @id @default(autoincrement())
  keywordType      KeywordType
  name             String
  description      String
  KeywordReference KeywordReference[]
  Condition        Condition?         @relation(fields: [conditionId], references: [id])
  conditionId      Int?

  @@unique([name, keywordType])
}

model Weapon {
  id                    Int                      @id @default(autoincrement())
  name                  String
  rarity                ItemRarity               @default(common)
  grade                 Int                      @default(1)
  picture               Json?
  description           String?
  stats                 Json
  price                 Int?
  equipped              Boolean?                 @default(false)
  characterInventory    CharacterInventory?      @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId  Int?
  baseWeaponId          Int?
  conditions            ConditionReference[]
  keywords              KeywordReference[]
  weaponLinkReference   WeaponLinkReference?     @relation("PrimaryLink")
  weaponLinkReferenceId Int?
  weaponLink            WeaponLinkReference?     @relation(fields: [weaponLinkId], references: [id], onDelete: Cascade)
  weaponLinkId          Int?
  armorLink             ArmorLinkReference?      @relation(fields: [armorLinkId], references: [id], onDelete: Cascade)
  armorLinkId           Int?
  cyberneticLink        CyberneticLinkReference? @relation(fields: [cyberneticLinkId], references: [id], onDelete: Cascade)
  cyberneticLinkId      Int?
  vehicleLink           VehicleLinkReference?    @relation(fields: [vehicleLinkId], references: [id], onDelete: Cascade)
  vehicleLinkId         Int?
  droneLink             DroneLinkReference?      @relation(fields: [droneLinkId], references: [id], onDelete: Cascade)
  droneLinkId           Int?
  cartRelation          CartWeaponRelation[]
}

model WeaponLinkReference {
  id          Int          @id @default(autoincrement())
  weapon      Weapon       @relation("PrimaryLink", fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId    Int          @unique
  armors      Armor[]
  weapons     Weapon[]
  cybernetics Cybernetic[]
  actions     Action[]
}

model Armor {
  id                   Int                      @id @default(autoincrement())
  name                 String
  rarity               ItemRarity               @default(common)
  grade                Int                      @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  equipped             Boolean?                 @default(false)
  characterInventory   CharacterInventory?      @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseArmorId          Int?
  conditions           ConditionReference[]
  keywords             KeywordReference[]
  armorLinkReference   ArmorLinkReference?      @relation("PrimaryLink")
  armorLinkReferenceId Int?
  weaponLink           WeaponLinkReference?     @relation(fields: [weaponLinkId], references: [id], onDelete: Cascade)
  weaponLinkId         Int?
  armorLink            ArmorLinkReference?      @relation(fields: [armorLinkId], references: [id], onDelete: Cascade)
  armorLinkId          Int?
  cyberneticLink       CyberneticLinkReference? @relation(fields: [cyberneticLinkId], references: [id], onDelete: Cascade)
  cyberneticLinkId     Int?
  vehicleLink          VehicleLinkReference?    @relation(fields: [vehicleLinkId], references: [id], onDelete: Cascade)
  vehicleLinkId        Int?
  cartRelation         CartArmorRelation[]
}

model ArmorLinkReference {
  id          Int          @id @default(autoincrement())
  armor       Armor        @relation("PrimaryLink", fields: [armorId], references: [id], onDelete: Cascade)
  armorId     Int          @unique
  armors      Armor[]
  weapons     Weapon[]
  cybernetics Cybernetic[]
  actions     Action[]
}

model Cybernetic {
  id                      Int                      @id @default(autoincrement())
  name                    String
  rarity                  ItemRarity               @default(common)
  grade                   Int                      @default(1)
  cyberneticType          CyberneticType
  stats                   Json?
  picture                 Json?
  description             String
  price                   Int?
  equipped                Boolean?                 @default(false)
  characterInventory      CharacterInventory?      @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId    Int?
  baseCyberneticId        Int?
  conditions              ConditionReference[]
  modifiers               Modifier[]
  keywords                KeywordReference[]
  cyberneticLinkReference CyberneticLinkReference? @relation("PrimaryLink")
  weaponLink              WeaponLinkReference?     @relation(fields: [weaponLinkId], references: [id], onDelete: Cascade)
  weaponLinkId            Int?
  armorLink               ArmorLinkReference?      @relation(fields: [armorLinkId], references: [id], onDelete: Cascade)
  armorLinkId             Int?
  cyberneticLink          CyberneticLinkReference? @relation(fields: [cyberneticLinkId], references: [id], onDelete: Cascade)
  cyberneticLinkId        Int?
  cartRelation            CartCyberneticRelation[]
}

model CyberneticLinkReference {
  id           Int          @id @default(autoincrement())
  cybernetic   Cybernetic   @relation("PrimaryLink", fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId Int          @unique
  armors       Armor[]
  weapons      Weapon[]
  cybernetics  Cybernetic[]
  actions      Action[]
}

model Action {
  id                   Int                        @id @default(autoincrement())
  name                 String
  description          String
  costs                Json?
  roll                 Json?
  actionType           ActionType
  actionSubtypes       String[]
  duration             Json?
  equipped             Boolean                    @default(false)
  characterInventory   CharacterInventory?        @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseActionId         Int?
  modifiers            Modifier[]
  weaponLink           WeaponLinkReference?       @relation(fields: [weaponLinkId], references: [id], onDelete: Cascade)
  weaponLinkId         Int?
  armorLink            ArmorLinkReference?        @relation(fields: [armorLinkId], references: [id], onDelete: Cascade)
  armorLinkId          Int?
  cyberneticLink       CyberneticLinkReference?   @relation(fields: [cyberneticLinkId], references: [id], onDelete: Cascade)
  cyberneticLinkId     Int?
  vehicleLink          VehicleLinkReference?      @relation(fields: [vehicleLinkId], references: [id], onDelete: Cascade)
  vehicleLinkId        Int?
  droneLink            DroneLinkReference?        @relation(fields: [droneLinkId], references: [id], onDelete: Cascade)
  droneLinkId          Int?
  modificationLink     ModificationLinkReference? @relation(fields: [modificationLinkId], references: [id], onDelete: Cascade)
  modificationLinkId   Int?
  itemLink             ItemLinkReference?         @relation(fields: [itemLinkId], references: [id], onDelete: Cascade)
  itemLinkId           Int?
}

model Vehicle {
  id                   Int                   @id @default(autoincrement())
  name                 String
  rarity               ItemRarity            @default(common)
  grade                Int                   @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  equipped             Boolean               @default(false)
  vehicleLinkReference VehicleLinkReference? @relation("PrimaryLink")
  characterInventory   CharacterInventory?   @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseVehicleId        Int?
  conditions           ConditionReference[]
  keywords             KeywordReference[]
  cartRelation         CartVehicleRelation[]
}

model VehicleLinkReference {
  id            Int            @id @default(autoincrement())
  vehicle       Vehicle        @relation("PrimaryLink", fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId     Int            @unique
  armors        Armor[]
  weapons       Weapon[]
  modifications Modification[]
  actions       Action[]
}

model Drone {
  id                   Int                  @id @default(autoincrement())
  name                 String
  rarity               ItemRarity           @default(common)
  grade                Int                  @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  equipped             Boolean              @default(false)
  droneLinkReference   DroneLinkReference?  @relation("PrimaryLink")
  characterInventory   CharacterInventory?  @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseDroneId          Int?
  conditions           ConditionReference[]
  keywords             KeywordReference[]
  cartRelation         CartDroneRelation[]
}

model DroneLinkReference {
  id            Int            @id @default(autoincrement())
  drone         Drone          @relation("PrimaryLink", fields: [droneId], references: [id], onDelete: Cascade)
  droneId       Int            @unique
  weapons       Weapon[]
  modifications Modification[]
  actions       Action[]
}

model Modification {
  id                        Int                        @id @default(autoincrement())
  name                      String
  rarity                    ItemRarity                 @default(common)
  grade                     Int                        @default(1)
  picture                   Json?
  price                     Int?
  modificationType          String
  description               String?
  stats                     Json?
  equipped                  Boolean                    @default(false)
  modificationLinkReference ModificationLinkReference? @relation("PrimaryLink")
  vehicleLink               VehicleLinkReference?      @relation(fields: [vehicleLinkId], references: [id], onDelete: Cascade)
  vehicleLinkId             Int?
  droneLink                 DroneLinkReference?        @relation(fields: [droneLinkId], references: [id], onDelete: Cascade)
  droneLinkId               Int?
  characterInventory        CharacterInventory?        @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId      Int?
  baseModificationId        Int?
  keywords                  KeywordReference[]
  cartRelation              CartModificationRelation[]
}

model ModificationLinkReference {
  id             Int          @id @default(autoincrement())
  modification   Modification @relation("PrimaryLink", fields: [modificationId], references: [id], onDelete: Cascade)
  modificationId Int          @unique
  actions        Action[]
}

model Item {
  id                   Int                  @id @default(autoincrement())
  name                 String
  rarity               ItemRarity           @default(common)
  grade                Int                  @default(1)
  picture              Json?
  price                Int?
  equipped             Boolean?             @default(false)
  category             ItemCategory
  description          String?
  stats                Json?
  characterInventory   CharacterInventory?  @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseItemId           Int?
  conditions           ConditionReference[]
  modifiers            Modifier[]
  keywords             KeywordReference[]
  itemLinkReference    ItemLinkReference?   @relation("PrimaryLink")
  cartRelation         CartItemRelation[]
}

model ItemLinkReference {
  id      Int      @id @default(autoincrement())
  item    Item     @relation("PrimaryLink", fields: [itemId], references: [id], onDelete: Cascade)
  itemId  Int      @unique
  actions Action[]
}

model Modifier {
  id           Int          @id @default(autoincrement())
  type         ModifierType
  stat         String?
  operator     String
  valueType    ValueType?
  attribute    String?
  skill        String?
  value        Int?
  duration     Json?
  action       Action?      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId     Int?
  cybernetic   Cybernetic?  @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId Int?
  item         Item?        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       Int?
  perk         Perk?        @relation(fields: [perkId], references: [id], onDelete: Cascade)
  perkId       Int?
}

enum ValueType {
  number
  attribute
  skill
}

enum ModifierType {
  roll
  stat
}

enum ItemCategory {
  reusable
  consumable
}

enum DurationUnit {
  second
  minute
  hour
  day
  week
  month
  year
  turn
  round
  scene
  session
}

model Perk {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  requirements Json?
  characters   Character[] @relation("CharacterToPerk")
  modifiers    Modifier[]
}

model BookSection {
  id      Int         @id @default(autoincrement())
  order   Int         @unique
  title   String      @unique
  entries BookEntry[]
}

model BookEntry {
  id        Int         @id @default(autoincrement())
  page      Int         @unique
  title     String
  section   BookSection @relation(fields: [sectionId], references: [id])
  sectionId Int
  content   Json

  @@unique([title, sectionId])
}

model PatchNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   Float    @unique
  title     String
  content   Json
}

model Error {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum KeywordType {
  weapon
  armor
  vehicle
  chromebits
  hardwired
  networked
}

enum CyberneticType {
  roll
  stat
  offensive
  defensive
  function
}

enum ActionType {
  action
  extendedAction
  reaction
  passive
}

enum ItemRarity {
  common
  uncommon
  rare
  blackMarket
  artifact
}

enum ConditionType {
  character
  item
}
