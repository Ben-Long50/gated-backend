generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  profilePicture String?
  googleId       String?     @unique
  facebookId     String?     @unique
  email          String      @unique
  password       String?
  role           UserRole    @default(USER)
  createdAt      DateTime    @default(now())
  characters     Character[]
  errorReports   Error[]
}

model Character {
  id                   Int                 @id @default(autoincrement())
  userId               Int
  level                Int                 @default(1)
  profits              Int                 @default(10)
  stats                Json                @default("{}")
  picture              Json?
  height               Int
  weight               Int
  age                  Int
  sex                  String
  background           String
  attributes           Json
  firstName            String
  lastName             String?
  user                 User                @relation(fields: [userId], references: [id])
  active               Boolean             @default(false)
  perks                Perk[]              @relation("CharacterToPerk")
  conditions           Json?
  characterCart        CharacterCart?      @relation(fields: [characterCartId], references: [id])
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id])
  characterCartId      Int?                @unique
  characterInventoryId Int?                @unique
}

model CharacterCart {
  id          Int          @id
  character   Character?
  characterId Int?         @unique
  weapons     Weapon[]
  armor       Armor[]
  cybernetics Cybernetic[]
  vehicles    Vehicle[]
}

model CharacterInventory {
  id          Int          @id
  character   Character?
  characterId Int?         @unique
  weapons     Weapon[]
  armor       Armor[]
  cybernetics Cybernetic[]
  vehicles    Vehicle[]
  actions     Action[]
}

enum ConditionType {
  character
  item
}

model Condition {
  id            Int           @id @default(autoincrement())
  name          String
  conditionType ConditionType
  description   String
}

model Keyword {
  id          Int         @id @default(autoincrement())
  keywordType KeywordType
  name        String
  description String

  @@unique([name, keywordType])
}

model Weapon {
  id                   Int                 @id @default(autoincrement())
  name                 String
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  keywords             Json[]
  equipped             Boolean?            @default(false)
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
}

model Armor {
  id                   Int                 @id @default(autoincrement())
  name                 String
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  keywords             Json[]
  equipped             Boolean?            @default(false)
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
}

model Cybernetic {
  id                   Int                 @id @default(autoincrement())
  name                 String
  cyberneticType       CyberneticType
  stats                Json
  picture              Json?
  description          String
  body                 String[]
  price                Int?
  keywords             Json[]
  modifiers            Json?
  equipped             Boolean?            @default(false)
  actions              Action[]
  armor                Armor[]
  weapons              Weapon[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
}

model Vehicle {
  id                   Int                 @id @default(autoincrement())
  name                 String
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  weapons              Json[]
  modifications        Modification[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
}

model Modification {
  id               Int       @id @default(autoincrement())
  name             String
  price            Int?
  modificationType String
  description      String?
  vehicles         Vehicle[]
}

model Perk {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  modifiers    Json?
  requirements Json?
  characters   Character[] @relation("CharacterToPerk")
}

model Action {
  id                   Int                 @id @default(autoincrement())
  name                 String
  description          String
  costs                Json?
  attribute            String?
  skill                String?
  actionType           ActionType
  actionSubtypes       String[]
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
}

model BookSection {
  id      Int         @id @default(autoincrement())
  order   Int         @unique
  title   String      @unique
  entries BookEntry[]
}

model BookEntry {
  id        Int         @id @default(autoincrement())
  page      Int         @unique
  title     String
  section   BookSection @relation(fields: [sectionId], references: [id])
  sectionId Int
  content   Json

  @@unique([title, sectionId])
}

model PatchNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   Float    @unique
  title     String
  content   Json
}

model Error {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum KeywordType {
  weapon
  armor
  cybernetic
}

enum CyberneticType {
  roll
  stat
  offensive
  defensive
  function
}

enum ActionType {
  action
  extendedAction
  reaction
}
