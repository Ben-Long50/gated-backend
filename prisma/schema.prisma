generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  profilePicture String?
  googleId       String?     @unique
  facebookId     String?     @unique
  email          String      @unique
  password       String?
  role           UserRole    @default(USER)
  createdAt      DateTime    @default(now())
  characters     Character[]
  errorReports   Error[]
}

model Character {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  level               Int                  @default(1)
  profits             Int                  @default(10)
  stats               Json                 @default("{}")
  picture             Json?
  height              Int
  weight              Int
  age                 Int
  sex                 String
  background          String
  attributes          Json
  firstName           String
  lastName            String?
  user                User                 @relation(fields: [userId], references: [id])
  active              Boolean              @default(false)
  perks               Perk[]               @relation("CharacterToPerk")
  characterConditions CharacterCondition[]
  characterCart       CharacterCart?
  characterInventory  CharacterInventory?
}

model CharacterCart {
  id            Int            @id @default(autoincrement())
  character     Character?     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   Int?           @unique
  weapons       Weapon[]
  armor         Armor[]
  cybernetics   Cybernetic[]
  vehicles      Vehicle[]
  modifications Modification[]
  items         Item[]
}

model CharacterInventory {
  id            Int            @id @default(autoincrement())
  character     Character?     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   Int?           @unique
  weapons       Weapon[]
  armor         Armor[]
  cybernetics   Cybernetic[]
  vehicles      Vehicle[]
  actions       Action[]
  modifications Modification[]
  items         Item[]
}

model CharacterCondition {
  id          Int       @id @default(autoincrement())
  stacks      Int?
  condition   Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId Int
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int
}

model ItemCondition {
  id             Int           @id @default(autoincrement())
  stacks         Int?
  condition      Condition     @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId    Int
  weapon         Weapon?       @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId       Int?
  armor          Armor?        @relation(fields: [armorId], references: [id], onDelete: Cascade)
  armorId        Int?
  cybernetic     Cybernetic?   @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId   Int?
  vehicle        Vehicle?      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId      Int?
  modification   Modification? @relation(fields: [modificationId], references: [id], onDelete: Cascade)
  modificationId Int?
  item           Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId         Int?
}

model Condition {
  id                  Int                  @id @default(autoincrement())
  name                String
  conditionType       ConditionType
  description         String
  characterConditions CharacterCondition[]
  itemConditions      ItemCondition[]
}

model Keyword {
  id          Int         @id @default(autoincrement())
  keywordType KeywordType
  name        String
  description String

  @@unique([name, keywordType])
}

model Weapon {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  keywords             Json[]
  equipped             Boolean?            @default(false)
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  vehicle              Vehicle?            @relation(fields: [vehicleId], references: [id])
  vehicleId            Int?
  actions              Action[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseWeaponId         Int?
  itemConditions       ItemCondition[]
}

model Armor {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  keywords             Json[]
  equipped             Boolean?            @default(false)
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  actions              Action[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseArmorId          Int?
  itemConditions       ItemCondition[]
}

model Cybernetic {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  cyberneticType       CyberneticType
  stats                Json
  picture              Json?
  description          String
  body                 String[]
  price                Int?
  keywords             Json[]
  modifiers            Json?
  equipped             Boolean?            @default(false)
  actions              Action[]
  armor                Armor[]
  weapons              Weapon[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseCyberneticId     Int?
  itemConditions       ItemCondition[]
}

model Vehicle {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  picture              Json?
  description          String?
  stats                Json
  price                Int?
  weapons              Weapon[]
  modifications        Modification[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseVehicleId        Int?
  itemConditions       ItemCondition[]
}

model Modification {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  price                Int?
  modificationType     String
  description          String?
  vehicle              Vehicle?            @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId            Int?
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseModificationId   Int?
  itemConditions       ItemCondition[]
}

model Item {
  id                   Int                 @id @default(autoincrement())
  name                 String
  rarity               ItemRarity          @default(common)
  grade                Int                 @default(1)
  picture              Json?
  price                Int?
  equipped             Boolean?            @default(false)
  category             ItemCategory
  subcategory          ItemSubcategory
  itemType             String?
  description          String
  stats                Json?
  modifiers            Json?
  actions              Action[]
  characterCart        CharacterCart[]
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseItemId           Int?
  itemConditions       ItemCondition[]
}

enum ItemCategory {
  reusable
  consumable
}

enum ItemSubcategory {
  chemicalTherapy
  chemicalAssistance
  anomaly
  gadget
  misc
}

enum DurationUnit {
  second
  minute
  hour
  day
  week
  month
  year
  turn
  round
  scene
  session
}

model Perk {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  modifiers    Json?
  requirements Json?
  characters   Character[] @relation("CharacterToPerk")
}

model Action {
  id                   Int                 @id @default(autoincrement())
  name                 String
  description          String
  costs                Json?
  roll                 Json?
  actionType           ActionType
  actionSubtypes       String[]
  duration             Json?
  weapon               Weapon?             @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId             Int?
  armor                Armor?              @relation(fields: [armorId], references: [id], onDelete: Cascade)
  armorId              Int?
  cybernetic           Cybernetic?         @relation(fields: [cyberneticId], references: [id], onDelete: Cascade)
  cyberneticId         Int?
  item                 Item?               @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId               Int?
  characterInventory   CharacterInventory? @relation(fields: [characterInventoryId], references: [id], onDelete: Cascade)
  characterInventoryId Int?
  baseActionId         Int?
}

model BookSection {
  id      Int         @id @default(autoincrement())
  order   Int         @unique
  title   String      @unique
  entries BookEntry[]
}

model BookEntry {
  id        Int         @id @default(autoincrement())
  page      Int         @unique
  title     String
  section   BookSection @relation(fields: [sectionId], references: [id])
  sectionId Int
  content   Json

  @@unique([title, sectionId])
}

model PatchNote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   Float    @unique
  title     String
  content   Json
}

model Error {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum KeywordType {
  weapon
  armor
  cybernetic
}

enum CyberneticType {
  roll
  stat
  offensive
  defensive
  function
}

enum ActionType {
  action
  extendedAction
  reaction
}

enum ItemRarity {
  common
  uncommon
  rare
  blackMarket
  artifact
}

enum ConditionType {
  character
  item
}
