generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  profilePicture String?
  googleId       String?     @unique
  facebookId     String?     @unique
  email          String      @unique
  password       String?
  role           UserRole    @default(USER)
  createdAt      DateTime    @default(now())
  characters     Character[]
  errorReports   Error[]
}

model Character {
  id          Int          @id @default(autoincrement())
  userId      Int
  level       Int          @default(1)
  profits     Int          @default(10)
  stats       Json         @default("{}")
  picture     Json?
  height      Int
  weight      Int
  age         Int
  sex         String
  background  String
  attributes  Json
  firstName   String
  lastName    String?
  user        User         @relation(fields: [userId], references: [id])
  armor       Armor[]      @relation("ArmorToCharacter")
  cybernetics Cybernetic[] @relation("CharacterToCybernetic")
  perks       Perk[]       @relation("CharacterToPerk")
  weapons     Weapon[]     @relation("CharacterToWeapon")
}

model Keyword {
  id          Int         @id @default(autoincrement())
  keywordType KeywordType
  name        String
  description String

  @@unique([name, keywordType])
}

model Weapon {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  picture     Json?
  description String?
  stats       Json
  price       Int?
  keywords    Json[]
  characters  Character[]  @relation("CharacterToWeapon")
  cybernetic  Cybernetic[] @relation("CyberneticWeapons")
}

model Armor {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  picture     Json?
  description String?
  stats       Json
  price       Int?
  keywords    Json[]
  characters  Character[]  @relation("ArmorToCharacter")
  cybernetic  Cybernetic[] @relation("CyberneticArmor")
}

model Cybernetic {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  cyberneticType CyberneticType
  stats          Json
  picture        Json?
  description    String
  body           String[]
  price          Int?
  keywords       Json[]
  characters     Character[]    @relation("CharacterToCybernetic")
  actions        Action[]       @relation("CyberneticActions")
  armor          Armor[]        @relation("CyberneticArmor")
  weapons        Weapon[]       @relation("CyberneticWeapons")
}

model Perk {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  requirements Json?
  characters   Character[] @relation("CharacterToPerk")
}

model Action {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String
  costs          Json?
  attribute      String?
  skill          String?
  actionType     ActionType
  actionSubtypes String[]
  cybernetics    Cybernetic[] @relation("CyberneticActions")
}

model BookSection {
  id      Int         @id @default(autoincrement())
  order   Int         @unique
  title   String      @unique
  entries BookEntry[]
}

model BookEntry {
  id        Int         @id @default(autoincrement())
  page      Int         @unique
  title     String
  section   BookSection @relation(fields: [sectionId], references: [id])
  sectionId Int
  content   Json

  @@unique([title, sectionId])
}

model Error {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUPERADMIN
}

enum KeywordType {
  weapon
  armor
  cybernetic
}

enum CyberneticType {
  roll
  stat
  offensive
  defensive
  function
}

enum ActionType {
  action
  extendedAction
  reaction
}
